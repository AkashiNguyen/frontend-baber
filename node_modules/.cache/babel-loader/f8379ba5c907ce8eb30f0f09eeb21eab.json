{"ast":null,"code":"import warnOnce from './warn-once';\n/**\n * Will print an API deprecation warning message in the console once per session.\n *\n * @param packageName       The package of the API being deprecated, eg `@atlaskit/button`\n * @param api               The API being deprecated - a component, API, prop\n * @param additionalMessage Additional guidance / next steps if applicable\n *\n * @example\n *\n * ```js\n * deprecationWarning('@atlaskit/button', 'className prop', 'This API will stop working in the next major version.')\n * ```\n */\n\nexport default function deprecationWarning(packageName, api, additionalMessage) {\n  warnOnce(\"[\".concat(packageName, \"]: The \").concat(api, \" is deprecated.\").concat(additionalMessage && \" \".concat(additionalMessage)));\n}\n/**\n * Logs a prop deprecation warning to console once during a session.\n *\n * @param packageName Use `process.env._PACKAGE_NAME_` instead of a static string.\n * @param propName Prop that is deprecated.\n * @param predicate If true the deprecation warning will be logged to console.\n * @param deprecationAnnouncementOnDAC Link to the public announcement on DAC.\n */\n\nexport function propDeprecationWarning(packageName, propName, predicate, deprecationAnnouncementOnDAC) {\n  if (process.env.NODE_ENV === 'development' && predicate) {\n    warnOnce(\"[\".concat(packageName, \"]: The \").concat(propName, \" prop is deprecated and will be removed, please migrate away.\\nPublic announcement: \").concat(deprecationAnnouncementOnDAC));\n  }\n}","map":{"version":3,"names":["warnOnce","deprecationWarning","packageName","api","additionalMessage","concat","propDeprecationWarning","propName","predicate","deprecationAnnouncementOnDAC","process","env","NODE_ENV"],"sources":["/Users/haitrinh2001/Documents/DEV/WEB/React/frontend-cattoc/node_modules/@atlaskit/ds-lib/dist/esm/utils/deprecation-warning.js"],"sourcesContent":["import warnOnce from './warn-once';\n/**\n * Will print an API deprecation warning message in the console once per session.\n *\n * @param packageName       The package of the API being deprecated, eg `@atlaskit/button`\n * @param api               The API being deprecated - a component, API, prop\n * @param additionalMessage Additional guidance / next steps if applicable\n *\n * @example\n *\n * ```js\n * deprecationWarning('@atlaskit/button', 'className prop', 'This API will stop working in the next major version.')\n * ```\n */\n\nexport default function deprecationWarning(packageName, api, additionalMessage) {\n  warnOnce(\"[\".concat(packageName, \"]: The \").concat(api, \" is deprecated.\").concat(additionalMessage && \" \".concat(additionalMessage)));\n}\n/**\n * Logs a prop deprecation warning to console once during a session.\n *\n * @param packageName Use `process.env._PACKAGE_NAME_` instead of a static string.\n * @param propName Prop that is deprecated.\n * @param predicate If true the deprecation warning will be logged to console.\n * @param deprecationAnnouncementOnDAC Link to the public announcement on DAC.\n */\n\nexport function propDeprecationWarning(packageName, propName, predicate, deprecationAnnouncementOnDAC) {\n  if (process.env.NODE_ENV === 'development' && predicate) {\n    warnOnce(\"[\".concat(packageName, \"]: The \").concat(propName, \" prop is deprecated and will be removed, please migrate away.\\nPublic announcement: \").concat(deprecationAnnouncementOnDAC));\n  }\n}"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,kBAAT,CAA4BC,WAA5B,EAAyCC,GAAzC,EAA8CC,iBAA9C,EAAiE;EAC9EJ,QAAQ,CAAC,IAAIK,MAAJ,CAAWH,WAAX,EAAwB,SAAxB,EAAmCG,MAAnC,CAA0CF,GAA1C,EAA+C,iBAA/C,EAAkEE,MAAlE,CAAyED,iBAAiB,IAAI,IAAIC,MAAJ,CAAWD,iBAAX,CAA9F,CAAD,CAAR;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,sBAAT,CAAgCJ,WAAhC,EAA6CK,QAA7C,EAAuDC,SAAvD,EAAkEC,4BAAlE,EAAgG;EACrG,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0CJ,SAA9C,EAAyD;IACvDR,QAAQ,CAAC,IAAIK,MAAJ,CAAWH,WAAX,EAAwB,SAAxB,EAAmCG,MAAnC,CAA0CE,QAA1C,EAAoD,sFAApD,EAA4IF,MAA5I,CAAmJI,4BAAnJ,CAAD,CAAR;EACD;AACF"},"metadata":{},"sourceType":"module"}